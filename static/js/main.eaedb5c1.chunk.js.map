{"version":3,"sources":["scripts/Battleship.ts","scripts/Gameboard.ts","components/Board.tsx","components/DisplayShips.tsx","components/Boards.tsx","scripts/Player.ts","scripts/Game.ts","components/App.tsx","index.tsx"],"names":["Battleship","shipLength","origin","rotated","parts","this","Array","fill","part","length","Error","getLength","every","Gameboard","size","tiles","ships","from","location","validPlacement","getBoardStates","notShot","battleship","placementOffset","_","k","contactOffset","map","placement","some","tile","contact","push","ship","shipOrigin","getOrigin","shipRotated","getRotated","off","filter","removeShip","placeShip","to","state","shipNotHit","attack","find","el","hit","markAroundSunk","isSunk","done","sort","a","b","len","success","tried","Math","floor","random","d","partsOffset","aroundOffset","around","states","shipHit","missed","i","j","shipParts","getParts","valid","offset","Board","props","useState","active","setActive","marked","setMarked","updateTiles","document","querySelectorAll","player","forEach","classList","remove","element","querySelector","add","game","getPlayer","getBoard","getTiles","getInit","originElement","chooseAction","e","target","elX","parseInt","getAttribute","elY","turn","loop","rotate","removeValid","move","showValid","boardCopy","getSize","getShips","getValidTiles","val","useEffect","init","className","row","data-x","data-y","data-player","onClick","onMouseMove","onMouseLeave","getName","DisplayShips","Boards","statePlayer","setStatePlayer","stateComputer","setStateComputer","shipsPlayer","setShipsPlayer","shipsComputer","setShipsComputer","updateStatePlayer","updateStateComputer","updateShipsPlayer","updateShipsComputer","loc","timeout","min","max","Promise","resolve","setTimeout","getWinner","playerTurn","setWinner","isWinner","updateTurn","next","computerTurn","rotateShip","moveShip","Player","board","name","attacks","shipsDamaged","pos","Game","shipSizes","players","currentPlayer","initialized","winner","distributeShips","index","getOpponent","receiveAttack","getCurrentPlayer","chooseAttack","allSunk","App","display","setDisplay","getTurn","setTurn","setInit","updateDisplay","type","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eaedb5c1.chunk.js","sourcesContent":["class Battleship {\n  private parts: boolean[];\n  private origin: [number, number]; // where the bow of the ship is\n  private rotated: boolean;\n\n  constructor(shipLength: number, origin: [number, number], rotated: boolean) {\n    this.parts = new Array(shipLength).fill(false);\n    this.origin = origin;\n    this.rotated = rotated;\n  }\n\n  get getParts(): boolean[] {\n    return this.parts;\n  }\n\n  get getLength(): number {\n    return this.parts.length;\n  }\n\n  get getOrigin(): [number, number] {\n    return this.origin;\n  }\n\n  get getRotated(): boolean {\n    return this.rotated;\n  }\n\n  hit(part: number): void {\n    // hits part of the ship, parts are in range from 1 to battleship.length\n    if (part > this.parts.length - 1) {\n      throw new Error(\n        `Can\\'t choose value heigher than ships length - 1 (${\n          this.getLength - 1\n        })`,\n      );\n    }\n    this.parts[part] = true;\n  }\n\n  isSunk(): boolean {\n    return this.parts.every((part) => part);\n  }\n}\n\nexport default Battleship;\n","import Battleship from './Battleship';\n\nclass Gameboard {\n  private size: number;\n  private tiles: (boolean | Battleship)[][];\n  private ships: Battleship[];\n\n  constructor(size: number) {\n    this.size = size;\n    this.tiles = Array.from({ length: size }, () =>\n      new Array(size).fill(false),\n    );\n    this.ships = [];\n  }\n\n  get getTiles(): (boolean | Battleship)[][] {\n    return this.tiles;\n  }\n\n  get getSize(): number {\n    return this.size;\n  }\n\n  get getShips(): Battleship[] {\n    return this.ships;\n  }\n\n  get getBoardStates(): { [state: string]: [number, number][] } {\n    // assign every coordinates to state it's in: ship hit, ship not hit, not shot (and no ship), missed (and no ship)\n    const states: { [state: string]: [number, number][] } = {\n      shipHit: [],\n      shipNotHit: [],\n      missed: [],\n      notShot: [],\n    };\n\n    for (let i = 0; i < this.size; i += 1) {\n      for (let j = 0; j < this.size; j += 1) {\n        const tile = this.tiles[i][j];\n        if (typeof tile === 'boolean') {\n          if (tile === false) {\n            states.notShot.push([i, j]);\n          } else {\n            states.missed.push([i, j]);\n          }\n        } else {\n          const shipParts = tile.getParts;\n          const shipOrigin = tile.getOrigin;\n          const partToHit = shipOrigin[0] - i + (shipOrigin[1] - j);\n          if (shipParts[partToHit] === false) {\n            states.shipNotHit.push([i, j]);\n          } else {\n            states.shipHit.push([i, j]);\n          }\n        }\n      }\n    }\n\n    return states;\n  }\n\n  get getValidTiles(): [number, number][] {\n    const valid: [number, number][] = [];\n    const offset: [number, number][] = [\n      [-1, -1],\n      [-1, 0],\n      [-1, 1],\n      [0, -1],\n      [0, 1],\n      [1, -1],\n      [1, 0],\n      [1, 1],\n    ];\n    for (let i = 0; i < this.size; i += 1) {\n      for (let j = 0; j < this.size; j += 1) {\n        if (\n          offset.every((off) => {\n            if (\n              i + off[0] < 0 ||\n              i + off[0] > this.size - 1 ||\n              j + off[1] < 0 ||\n              j + off[1] > this.size - 1\n            ) {\n              return true;\n            }\n            return this.tiles[i + off[0]][j + off[1]] === false;\n          })\n        ) {\n          valid.push([i, j]);\n        }\n      }\n    }\n    return valid;\n  }\n\n  placeShip(\n    shipLength: number,\n    location: [number, number],\n    rotated: boolean,\n  ): void {\n    const validPlacement = this.getBoardStates.notShot;\n    const battleship = new Battleship(\n      shipLength,\n      [location[0], location[1]],\n      rotated,\n    );\n    const placementOffset: [number, number][] = Array.from(\n      { length: shipLength },\n      (_, k) => (rotated ? [k, 0] : [0, k]),\n    );\n    const contactOffset: number[][] = [\n      [-1, -1],\n      [-1, 0],\n      [-1, 1],\n      [0, -1],\n      [0, 1],\n      [1, -1],\n      [1, 0],\n      [1, 1],\n    ];\n\n    placementOffset.map((placement) => {\n      // checks if ship placement is valid\n      if (\n        !validPlacement.some(\n          (tile) =>\n            tile[0] === location[0] - placement[0] &&\n            tile[1] === location[1] - placement[1],\n        )\n      ) {\n        throw new Error('Invalid location.');\n      }\n      contactOffset.map((contact) => {\n        // checks tiles around ship, so no touching ship placing is possible\n        if (\n          location[0] - placement[0] + contact[0] < 0 ||\n          location[0] - placement[0] + contact[0] > this.size - 1 ||\n          location[1] - placement[1] + contact[1] < 0 ||\n          location[1] - placement[1] + contact[1] > this.size - 1\n        ) {\n          return;\n        }\n        if (\n          this.tiles[location[0] - placement[0] + contact[0]][\n            location[1] - placement[1] + contact[1]\n          ] !== false\n        ) {\n          throw new Error('Invalid location.');\n        }\n      });\n    });\n\n    placementOffset.map((placement) => {\n      // if everything is correct places ship\n      this.tiles[location[0] - placement[0]][\n        location[1] - placement[1]\n      ] = battleship;\n    });\n    this.ships.push(battleship);\n  }\n\n  removeShip(location: number[]): void | Battleship {\n    if (typeof this.tiles[location[0]][location[1]] === 'boolean') return;\n\n    const ship = this.tiles[location[0]][location[1]] as Battleship;\n    const shipLength = ship.getLength;\n    const shipOrigin = ship.getOrigin;\n    const shipRotated = ship.getRotated;\n    const offset: [number, number][] = Array.from(\n      { length: shipLength },\n      (_, k) => (shipRotated ? [k, 0] : [0, k]),\n    );\n\n    offset.map((off) => {\n      this.tiles[shipOrigin[0] - off[0]][shipOrigin[1] - off[1]] = false;\n    });\n    this.ships = this.ships.filter(\n      // remove ship from ship array\n      (ship) =>\n        ship.getLength !== shipLength ||\n        ship.getOrigin[0] !== shipOrigin[0] ||\n        ship.getOrigin[1] !== shipOrigin[1] ||\n        ship.getRotated !== shipRotated,\n    );\n\n    return ship;\n  }\n\n  rotateShip(location: [number, number]): boolean {\n    const ship = this.removeShip(location);\n    if (ship) {\n      try {\n        this.placeShip(ship.getLength, ship.getOrigin, !ship.getRotated);\n        return true;\n      } catch {\n        this.placeShip(ship.getLength, ship.getOrigin, ship.getRotated);\n        return false;\n      }\n    }\n    return false;\n  }\n\n  moveShip(from: [number, number], to: [number, number]): boolean {\n    const ship = this.removeShip(from);\n    if (ship) {\n      try {\n        this.placeShip(ship.getLength, to, ship.getRotated);\n        return true;\n      } catch {\n        this.placeShip(ship.getLength, ship.getOrigin, ship.getRotated);\n        return false;\n      }\n    }\n    return false;\n  }\n\n  receiveAttack(location: [number, number]): boolean {\n    const state = this.getBoardStates;\n    const validAttacks = [...state.shipNotHit, ...state.notShot];\n    if (\n      !validAttacks.some(\n        (attack) => attack[0] === location[0] && attack[1] === location[1],\n      )\n    ) {\n      return false;\n    }\n    if (\n      state.notShot.find((el) => el[0] === location[0] && el[1] === location[1])\n    ) {\n      this.tiles[location[0]][location[1]] = true;\n      return true;\n    }\n    if (\n      state.shipNotHit.find(\n        (el) => el[0] === location[0] && el[1] === location[1],\n      )\n    ) {\n      const tile = this.tiles[location[0]][location[1]];\n      (<Battleship>tile).hit(\n        (<Battleship>tile).getOrigin[0] -\n          location[0] +\n          ((<Battleship>tile).getOrigin[1] - location[1]),\n      );\n      this.markAroundSunk(<Battleship>tile);\n      return true;\n    }\n    return false;\n  }\n\n  allSunk(): boolean {\n    return this.ships.every((ship) => ship.isSunk());\n  }\n\n  distributeShips(ships: number[]): boolean {\n    const done: boolean[] = [];\n    ships\n      .sort((a, b) => b - a)\n      .map((len) => {\n        let success = false;\n        const tried: [[number, number], boolean][] = [];\n        let location: [number, number] = [\n          Math.floor(Math.random() * this.size),\n          Math.floor(Math.random() * this.size),\n        ];\n        let rotated: boolean = Math.random() < 0.5 ? true : false;\n        do {\n          try {\n            do {\n              location = [\n                Math.floor(Math.random() * this.size),\n                Math.floor(Math.random() * this.size),\n              ];\n              rotated = Math.random() < 0.5 ? true : false;\n            } while (\n              tried.find(\n                (el) =>\n                  el[0][0] === location[0] &&\n                  el[0][1] === location[1] &&\n                  el[1] === rotated,\n              )\n            );\n            this.placeShip(len, location, rotated);\n            success = true;\n          } catch {\n            tried.push([location, rotated]);\n            success = false;\n          }\n        } while (!success && tried.length < this.size * this.size);\n        done.push(success);\n      });\n    return done.every((d) => d);\n  }\n\n  private markAroundSunk(ship: Battleship): void {\n    if (ship.isSunk()) {\n      const origin = ship.getOrigin;\n      const partsOffset = Array.from({ length: ship.getLength }, (_, k) =>\n        ship.getRotated ? [k, 0] : [0, k],\n      );\n      const aroundOffset: number[][] = [\n        [-1, -1],\n        [-1, 0],\n        [-1, 1],\n        [0, -1],\n        [0, 1],\n        [1, -1],\n        [1, 0],\n        [1, 1],\n      ];\n      partsOffset.map((part) => {\n        aroundOffset.map((around) => {\n          if (\n            origin[0] - part[0] + around[0] < 0 ||\n            origin[0] - part[0] + around[0] > this.size - 1 ||\n            origin[1] - part[1] + around[1] < 0 ||\n            origin[1] - part[1] + around[1] > this.size - 1\n          ) {\n            return;\n          }\n          if (\n            this.tiles[origin[0] - part[0] + around[0]][\n              origin[1] - part[1] + around[1]\n            ] === false\n          ) {\n            this.tiles[origin[0] - part[0] + around[0]][\n              origin[1] - part[1] + around[1]\n            ] = true;\n          }\n        });\n      });\n    }\n  }\n}\n\nexport default Gameboard;\n","import React, { ReactElement, useState, useEffect } from 'react';\nimport Battleship from '../scripts/Battleship';\nimport Game from '../scripts/Game';\nimport Gameboard from '../scripts/Gameboard';\nimport '../styles/Board.scss';\n\nfunction Board(props: {\n  player: 0 | 1;\n  game: Game;\n  state: { [state: string]: [number, number][] };\n  loop: (loc: [number, number]) => void;\n  rotate: (loc: [number, number]) => void;\n  move: (from: [number, number], to: [number, number]) => void;\n  turn: 0 | 1;\n  init: boolean;\n}): ReactElement {\n  const [active, setActive] = useState<string>('');\n  const [marked, setMarked] = useState<Battleship | null>(null);\n\n  function updateTiles(): void {\n    // adds classes to elements appropriate to their state\n    const elements = document.querySelectorAll(\n      `.board-tile[data-player=\"${props.player}\"]`,\n    );\n    elements.forEach((el) => {\n      // first clear all added classes\n      el.classList.remove('ship-not-hit');\n      el.classList.remove('ship-hit');\n      el.classList.remove('ship-sunk');\n      el.classList.remove('missed');\n      el.classList.remove('marked-origin');\n      el.classList.remove('marked');\n    });\n\n    if (props.player === 0) {\n      props.state.shipNotHit.map((ship) => {\n        const element = document.querySelector(\n          `.board-tile[data-x=\"${ship[0]}\"][data-y=\"${ship[1]}\"][data-player=\"${props.player}\"]`,\n        );\n        element?.classList.add('ship-not-hit');\n      });\n    }\n    props.state.shipHit.map((ship) => {\n      const element = document.querySelector(\n        `.board-tile[data-x=\"${ship[0]}\"][data-y=\"${ship[1]}\"][data-player=\"${props.player}\"]`,\n      );\n      if (\n        (props.game.getPlayer(props.player).getBoard.getTiles[ship[0]][\n          ship[1]\n        ] as Battleship).isSunk()\n      ) {\n        element?.classList.add('ship-sunk');\n      } else {\n        element?.classList.add('ship-hit');\n      }\n    });\n    props.state.missed.map((ship) => {\n      const element = document.querySelector(\n        `.board-tile[data-x=\"${ship[0]}\"][data-y=\"${ship[1]}\"][data-player=\"${props.player}\"]`,\n      );\n      element?.classList.add('missed');\n    });\n\n    if (marked && !props.game.getInit) {\n      const origin = marked.getOrigin;\n      const offset: [number, number][] = Array.from(\n        { length: marked.getLength - 1 },\n        (_, k) => (marked.getRotated ? [k + 1, 0] : [0, k + 1]),\n      );\n\n      const originElement = document.querySelector(\n        `.board-tile[data-x=\"${origin[0]}\"][data-y=\"${origin[1]}\"][data-player=\"${props.player}\"]`,\n      );\n      originElement?.classList.add('marked-origin');\n\n      offset.map((off) => {\n        const element = document.querySelector(\n          `.board-tile[data-x=\"${origin[0] - off[0]}\"][data-y=\"${\n            origin[1] - off[1]\n          }\"][data-player=\"${props.player}\"]`,\n        );\n        element?.classList.add('marked');\n      });\n    }\n  }\n\n  function chooseAction(e: React.MouseEvent<HTMLDivElement>): void {\n    const el = e.target as HTMLDivElement;\n    const elX = parseInt(el.getAttribute('data-x') as string, 10);\n    const elY = parseInt(el.getAttribute('data-y') as string, 10);\n\n    if (\n      props.player === 1 - props.turn &&\n      props.player === 1 &&\n      props.game.getInit\n    ) {\n      props.loop([elX, elY]);\n    } else if (props.player === 0 && !props.game.getInit) {\n      if (!marked) {\n        const tile = props.game.getPlayer(0).getBoard.getTiles[elX][elY];\n        if (typeof tile !== 'boolean') {\n          setMarked(tile);\n        }\n      } else if (marked) {\n        const origin = marked.getOrigin;\n        if (origin[0] === elX && origin[1] === elY) {\n          props.rotate([elX, elY]);\n          removeValid();\n          setMarked(null);\n        } else {\n          props.move([origin[0], origin[1]], [elX, elY]);\n          removeValid();\n          setMarked(null);\n        }\n      }\n    }\n  }\n\n  function showValid(e: React.MouseEvent<HTMLDivElement>): void {\n    // marks valid tiles for moving or rotating ship\n    if (marked) {\n      const el = e.target as HTMLDivElement;\n      const elX = parseInt(el.getAttribute('data-x') as string, 10);\n      const elY = parseInt(el.getAttribute('data-y') as string, 10);\n      const origin = marked.getOrigin;\n\n      // offset is different if we mouse over origin tile or not\n      let offset: [number, number][];\n      if (elX === origin[0] && elY === origin[1]) {\n        offset = Array.from({ length: marked.getLength }, (_, k) =>\n          marked.getRotated ? [0, k] : [k, 0],\n        );\n      } else {\n        offset = Array.from({ length: marked.getLength }, (_, k) =>\n          marked.getRotated ? [k, 0] : [0, k],\n        );\n      }\n\n      // get valid tiles, but include tiles in place of marked ship\n      const boardCopy = new Gameboard(props.game.getPlayer(0).getBoard.getSize);\n      const ships = props.game.getPlayer(0).getBoard.getShips;\n      ships.map((ship) => {\n        if (\n          ship.getOrigin[0] !== origin[0] ||\n          ship.getOrigin[1] !== origin[1]\n        ) {\n          boardCopy.placeShip(ship.getLength, ship.getOrigin, ship.getRotated);\n        }\n      });\n      const valid = boardCopy.getValidTiles;\n\n      // mark tiles\n      if (\n        offset.every((off) =>\n          valid.find(\n            (val) => elX - off[0] === val[0] && elY - off[1] === val[1],\n          ),\n        )\n      ) {\n        const originElement = document.querySelector(\n          `.board-tile[data-x=\"${elX}\"][data-y=\"${elY}\"][data-player=\"${0}\"]`,\n        );\n        originElement?.classList.add('valid-origin');\n\n        offset.map((off) => {\n          if (off[0] !== 0 || off[1] !== 0) {\n            const element = document.querySelector(\n              `.board-tile[data-x=\"${elX - off[0]}\"][data-y=\"${\n                elY - off[1]\n              }\"][data-player=\"${0}\"]`,\n            );\n            element?.classList.add('valid');\n          }\n        });\n      }\n    }\n  }\n\n  function removeValid() {\n    const elements = document.querySelectorAll(\n      `.board-tile[data-player=\"${0}\"]`,\n    );\n    elements.forEach((el) => {\n      el.classList.remove('valid-origin');\n      el.classList.remove('valid');\n    });\n  }\n\n  useEffect(() => {\n    if (!props.game.getInit) {\n      setActive('active');\n    } else if (props.turn === 1 - props.player) {\n      setActive('active');\n    } else {\n      setActive('');\n    }\n    updateTiles();\n  }, [props.turn, props.init]);\n\n  useEffect(() => {\n    updateTiles();\n  });\n\n  return (\n    <div className=\"board\">\n      <table className={`board-wrapper ${active}`}>\n        <tbody>\n          {props.game\n            .getPlayer(props.player)\n            .getBoard.getTiles.map((row, i) => {\n              return (\n                <tr key={i} className=\"board-row\">\n                  {row.map((_, j) => {\n                    return (\n                      <td key={j} className=\"board-element\">\n                        <div\n                          key={`(${i}, ${j})`}\n                          data-x={`${i}`}\n                          data-y={`${j}`}\n                          data-player={props.player}\n                          className=\"board-tile\"\n                          onClick={chooseAction}\n                          onMouseMove={showValid}\n                          onMouseLeave={removeValid}\n                        />\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n        </tbody>\n      </table>\n      <h4>{`${props.game.getPlayer(props.player).getName} board`}</h4>\n    </div>\n  );\n}\n\nexport default Board;\n","import React, { ReactElement } from 'react';\nimport Battleship from '../scripts/Battleship';\nimport '../styles/DisplayShips.scss';\n\nfunction DisplayShips(props: {\n  player: string;\n  ships: Battleship[];\n}): ReactElement {\n  return (\n    <div className={`ships-container ${props.player}`}>\n      {props.ships.sort((a, b) => a.getLength - b.getLength).map((ship, i) => {\n        return (\n          <div key={i} className=\"ship-wrapper\">\n            {ship.getParts.map((_, j) => {\n              if (ship.isSunk()) {\n                return <div key={j} className=\"part sunk\" />;\n              } else {\n                return <div key={j} className=\"part\" />;\n              }\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default DisplayShips;\n","import React, { ReactElement, useState } from 'react';\nimport Board from './Board';\nimport DisplayShips from './DisplayShips';\nimport Game from '../scripts/Game';\nimport '../styles/Boards.scss';\nimport Battleship from '../scripts/Battleship';\n\nfunction Boards(props: {\n  game: Game;\n  updateTurn: () => void;\n  turn: 0 | 1;\n  init: boolean;\n}): ReactElement {\n  const [statePlayer, setStatePlayer] = useState<{\n    [state: string]: [number, number][];\n  }>(props.game.getPlayer(0).getBoard.getBoardStates);\n  const [stateComputer, setStateComputer] = useState<{\n    [state: string]: [number, number][];\n  }>(props.game.getPlayer(1).getBoard.getBoardStates);\n  const [shipsPlayer, setShipsPlayer] = useState<Battleship[]>(\n    props.game.getPlayer(0).getBoard.getShips,\n  );\n  const [shipsComputer, setShipsComputer] = useState<Battleship[]>(\n    props.game.getPlayer(1).getBoard.getShips,\n  );\n\n  function updateStatePlayer(): void {\n    setStatePlayer(props.game.getPlayer(0).getBoard.getBoardStates);\n  }\n\n  function updateStateComputer(): void {\n    setStateComputer(props.game.getPlayer(1).getBoard.getBoardStates);\n  }\n\n  function updateShipsPlayer(): void {\n    setShipsPlayer(props.game.getPlayer(0).getBoard.getShips);\n  }\n\n  function updateShipsComputer(): void {\n    setShipsComputer(props.game.getPlayer(1).getBoard.getShips);\n  }\n\n  async function loop(loc: [number, number]): Promise<void> {\n    function timeout(min: number, max: number) {\n      return new Promise((resolve) =>\n        setTimeout(resolve, Math.floor(Math.random() * (max - min)) + min),\n      );\n    }\n\n    if (props.game.getWinner === -1) {\n      const success = props.game.playerTurn([loc[0], loc[1]]);\n      if (success) {\n        props.game.setWinner = props.game.isWinner();\n        updateStateComputer();\n        updateShipsComputer();\n        props.updateTurn();\n        props.game.next();\n        if (props.game.getWinner === -1) {\n          props.updateTurn();\n          await timeout(500, 2000);\n          props.game.computerTurn();\n          props.game.setWinner = props.game.isWinner();\n          props.updateTurn();\n          props.game.next();\n          props.updateTurn();\n          updateStatePlayer();\n          updateShipsPlayer();\n        }\n      }\n    }\n  }\n\n  function rotateShip(loc: [number, number]): void {\n    props.game.getPlayer(0).getBoard.rotateShip(loc);\n    updateStatePlayer();\n  }\n\n  function moveShip(from: [number, number], to: [number, number]): void {\n    props.game.getPlayer(0).getBoard.moveShip(from, to);\n    updateStatePlayer();\n  }\n\n  return (\n    <div className=\"boards-container\">\n      <div className=\"board-container\">\n        <DisplayShips player=\"player\" ships={shipsPlayer} />\n        <Board\n          player={0}\n          game={props.game}\n          state={statePlayer}\n          loop={loop}\n          rotate={rotateShip}\n          move={moveShip}\n          turn={props.turn}\n          init={props.init}\n        />\n      </div>\n      <div className=\"board-container\">\n        <Board\n          player={1}\n          game={props.game}\n          state={stateComputer}\n          loop={loop}\n          rotate={rotateShip}\n          move={moveShip}\n          turn={props.turn}\n          init={props.init}\n        />\n        <DisplayShips player=\"computer\" ships={shipsComputer} />\n      </div>\n    </div>\n  );\n}\n\nexport default Boards;\n","import Gameboard from './Gameboard';\nimport Battleship from './Battleship';\n\nclass Player {\n  private board: Gameboard;\n  private name: string;\n\n  constructor(board: Gameboard, name: string) {\n    this.board = board;\n    this.name = name;\n  }\n\n  get getBoard(): Gameboard {\n    return this.board;\n  }\n\n  get getName(): string {\n    return this.name;\n  }\n\n  chooseAttack(board: Gameboard): number[] {\n    const state = board.getBoardStates;\n    let attacks: [number, number][] = [];\n\n    if (state.shipHit.length > 0) {\n      // if there are any ships that got hit\n      // check if those ships are not yet sunk\n      // if so, add all tiles around that ship that are not yet attacked to possible attacks\n      const shipsDamaged = state.shipHit.filter((loc) => {\n        if (!(<Battleship>board.getTiles[loc[0]][loc[1]]).isSunk()) {\n          return true;\n        }\n        return false;\n      });\n      if (shipsDamaged.length > 0) {\n        let offset: [number, number][] = [\n          [-1, 0],\n          [0, -1],\n          [0, 1],\n          [1, 0],\n        ];\n        shipsDamaged.forEach((pos) => {\n          if (\n            (<Battleship>board.getTiles[pos[0]][pos[1]]).getParts.filter(\n              (part) => part,\n            ).length > 1\n          ) {\n            offset = (<Battleship>board.getTiles[pos[0]][pos[1]]).getRotated\n              ? [\n                  [-1, 0],\n                  [1, 0],\n                ]\n              : [\n                  [0, -1],\n                  [0, 1],\n                ];\n          }\n          offset.forEach((off) => {\n            if (\n              pos[0] + off[0] < 0 ||\n              pos[0] + off[0] > board.getSize - 1 ||\n              pos[1] + off[1] < 0 ||\n              pos[1] + off[1] > board.getSize - 1\n            ) {\n              return;\n            }\n            if (\n              !state.shipHit.find(\n                (el) => el[0] === pos[0] + off[0] && el[1] === pos[1] + off[1],\n              ) &&\n              !state.missed.find(\n                (el) => el[0] === pos[0] + off[0] && el[1] === pos[1] + off[1],\n              )\n            ) {\n              attacks.push([pos[0] + off[0], pos[1] + off[1]]);\n            }\n          });\n        });\n        if (attacks.length > 0) {\n          return attacks[Math.floor(Math.random() * attacks.length)];\n        }\n      }\n    }\n    // else, just pick random not yet hit tile\n    attacks = [...state.shipNotHit, ...state.notShot];\n    return attacks[Math.floor(Math.random() * attacks.length)];\n  }\n}\n\nexport default Player;\n","import Player from './Player';\nimport Gameboard from './Gameboard';\n\nclass Game {\n  private shipSizes: number[];\n  private players: Player[];\n  private currentPlayer: 0 | 1;\n  private initialized: boolean;\n  private winner: -1 | 0 | 1;\n\n  constructor(shipSizes: number[], size: number) {\n    this.shipSizes = shipSizes;\n    this.players = [\n      new Player(new Gameboard(size), 'Player'),\n      new Player(new Gameboard(size), 'Computer'),\n    ];\n    this.currentPlayer = 0;\n    this.initialized = false;\n    this.winner = -1;\n\n    this.players[0].getBoard.distributeShips(this.shipSizes);\n    this.players[1].getBoard.distributeShips(this.shipSizes);\n  }\n\n  init(): void {\n    if (\n      this.players[0].getBoard.getShips.length === this.shipSizes.length &&\n      !this.initialized\n    ) {\n      this.initialized = true;\n    }\n  }\n\n  get getCurrentPlayer(): Player {\n    return this.players[this.currentPlayer];\n  }\n\n  get getOpponent(): Player {\n    return this.players[1 - this.currentPlayer];\n  }\n\n  get getTurn(): 0 | 1 {\n    return this.currentPlayer;\n  }\n\n  get getWinner(): -1 | 0 | 1 {\n    return this.winner;\n  }\n\n  set setWinner(winner: -1 | 0 | 1) {\n    this.winner = winner;\n  }\n\n  get getInit(): boolean {\n    return this.initialized;\n  }\n\n  get getShips(): number[] {\n    return this.shipSizes;\n  }\n\n  getPlayer(index: 0 | 1): Player {\n    return this.players[index];\n  }\n\n  next(): void {\n    this.currentPlayer = <0 | 1>(1 - this.currentPlayer);\n  }\n\n  playerTurn(location: [number, number]): boolean {\n    return this.getOpponent.getBoard.receiveAttack(location);\n  }\n\n  computerTurn(): void {\n    let attack: [number, number];\n    let success = false;\n    do {\n      attack = <[number, number]>(\n        this.getCurrentPlayer.chooseAttack(this.getOpponent.getBoard)\n      );\n      success = this.getOpponent.getBoard.receiveAttack(attack);\n    } while (!success);\n  }\n\n  isWinner(): -1 | 0 | 1 {\n    return this.getOpponent.getBoard.allSunk() ? this.currentPlayer : -1;\n  }\n}\n\nexport default Game;\n","import React, { ReactElement, useState } from 'react';\nimport Boards from './Boards';\nimport Game from '../scripts/Game';\nimport 'normalize.css';\nimport '../styles/App.scss';\n\nfunction App(): ReactElement {\n  const ships: number[] = [5, 4, 3, 3, 2];\n  const [game, setGame] = useState<Game>(new Game(ships, 10));\n  const [display, setDisplay] = useState<string>('Move/Rotate ships');\n  const [turn, setTurn] = useState<0 | 1>(game.getTurn);\n  const [init, setInit] = useState<boolean>(game.getInit);\n\n  function updateDisplay(): void {\n    if (!game.getInit) {\n      setDisplay('Move/Rotate ships');\n    } else if (game.getWinner !== -1) {\n      setDisplay(`${game.getPlayer(game.getWinner).getName} won!`);\n    } else if (game.getInit) {\n      setDisplay(`${game.getCurrentPlayer.getName} turn`);\n    }\n  }\n\n  function updateTurn(): void {\n    setTurn(game.getTurn);\n    updateDisplay();\n  }\n\n  function updateInit(): void {\n    setInit(game.getInit);\n  }\n\n  function initGame(): void {\n    game.init();\n    updateDisplay();\n    updateInit();\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"display-wrapper\">\n        <div className=\"display\">\n          <h2>{display}</h2>\n        </div>\n      </div>\n      <div className=\"buttons\">\n        <button type=\"button\" onClick={initGame}>\n          Start Game\n        </button>\n      </div>\n      <Boards game={game} updateTurn={updateTurn} turn={turn} init={init} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'normalize.css';\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}